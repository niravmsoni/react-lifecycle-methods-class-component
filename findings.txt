87. Created a project 
    Used npx-create-react-app
    Removed unnecessary items
    Copied existing index.html of older project(To import all bootstrap and other things configured as part of older project)

88. Created class component, created state and installed axios
    Creating a class component namely "CycloPediaClassPage".
    We'll be using random API to get instructor as well as students that we'll be using in the application.
    We'll be storing instructor(object), studentList(array), studentCount(int) and hideInstructor(bool) in state

    src > Utility > api.jsx - Copied it from existing project.
    Instal axios - npm install axios

89. Main Lifecycle methods and componentDidMount in DETAIL
        componentDidMount(){}
        componentDidUpdate(){}
        componentWillUnmount(){}
    
    Added distinct console logs in each of these methods
    Then, exported that component and consumed it in index.jsx

    componentDidMount()
    When doing npm start, we see the log "Component Did Mount" being printed in the console logs.
    
    TAKEAWAY - Whatever code we write inside componentDidMount, it will be immediately invoked as soon as the component is mounted.
    Load data in initial state or from a remote endpoint - Use componentDidMount()
    So, now, called the Random API written in api.jsx in componentDidMount().
    Able to see data being logged to console. Now, we'll extract information from response and then set it in the state

    Once information is set in state, then in the render method, we're checking whether this.state.instructor has data.
    Once populated, we'll render the Name, email and phone on the UI 

    ComponentDidMount example - 
    https://www.w3schools.com/react/showreact.asp?filename=demo2_react_lifecycle_componentdidmount

90. componentDidUpdate()

    For now, added new HTML content to display student count.
    Used the studentCount value from the state. Added 2 new buttons > Add Student and Remove All students.
    Upon click, added 2 new handlers that modified the "studentCount" state value to current + 1 and 0 respectively

    Upon refreshing the page, we see do see 2 things in the logs:
    Render component
    Component Did Update -> Why was this invoked?

    Since we're fetching the instructor details on the load, once we have information, we're UPDATING the component.
    If we comment out the code to populate state with random API response, we are not modifying the component anymore(Since this.state.instructor will never have value).
    Due to which the Component Did update does not get printed in the console

    DIFFERENCE BETWEEN DidMount() and DidUpdate()
    DidMount() -> Executes only once(For the very first time the component is rendered)
    DidUpdate() -> Executes everytime the component is re-rendered/updated(For ex: Add/remove button onClick event resulting in changes in HTML dom)

    render() -> This method will always be calledS

91. Controlled Component
    - Let's say we have a textbox and we want to save the value in the STATE AS SOON AS THE USER TYPES THEM.
    That's known as controlled component
    Added 2 items to the HTML under Feedback section namely "Name" & "Feedback"
    Added 2 new properties under state object namely inputName and inputFeedback
    Before:
    <input 
                type="text"
                placeholder="Name..."></input>

    After:
    <input 
                type="text"
                placeholder="Name..." 
                value={this.state.inputName}
                onChange={(e)=>{this.setState({inputName: e.target.value})}}></input>

    So, now, we bound value with state property. And wrote an onChange event which will update state value DYNAMICALLY as we type it.
    If we do not put an onChange, it will throw console error and field will change to readonly
    This is known as controlled component.

92. Local storage
    Planning to save the state to local storage
    Whatever feedback user enters(inputName and inputFeedback set as controlled components in previous step)
    we will save it to local storage.
    Inspect element > Application > Local Storage

    componentDidUpdate() -> Since this will trigger as soon as the component is updated, in our case, it will trigger when we set the instructor name and its details to HTML.
    We're going to do JSON.stringify & set the value in localStorage(Browser)
    We need to set key and value(JSON.stringify the value & then store it)

    After that, in componentDidMount(), we will check if the data exists in local storage, if so, pull it directly, if not, make call to RandomAPI, get and set the data
    PLUS, since we have controlled component, whatever we type dynamically, will be set to browsers local storage AS WE TYPE(Since its bound to OnChange)

93. Moving out instructor to separate component
    Moved instructor related code in a separate child class component and passed state.instructor as prop.
    In instructor.jsx, changed code to read from prop instead of state.

    Also, added 3 methods - componentDidMount(), componentDidUpdate() and componentWillUnmount()
    First, parent component method are being called and then the child ones

94. Hide instructor details on Toggle.
    Moved toggle button click implementation to CycloPediaClassPage.jsx
    Added a handler there and toggled the state hideInstructor value.
    Also, updated css to change icon toggle-on to toggle-off based on state value.

    When we hide the instructor section, we see UnMount - Instructor being triggered.
    TAKEAWAY - When a compoent is removed, we see componentWillUnmount() being triggered,
    So, its a great place to cleanup functionality(Event Listener etc.)

95.
    Add Student >
        Upon click of Add student, call random API & add it(Just name) to studentList array in state.

        We're going to use componentDidUpdate() to call random API to get student.
        WE're checking previousState.studentCount and current state's studentCount.
        IF new value > old value, we call random API and set the name in state.studentList.
        If its less, we empty the state.

        Also, if we delete the localStorage and reload page, while loading Instructor.jsx, it will throw error.
        To correct it, added a check in CycloPediaClassPage's place where we're rendering Instructor component to only render if the value is populated.
        
----------
107.
    Re-using same project for implementing the equivalent of componentDidMount, componentDidUpdate and componentWillUnmount but using useEffect (i.e. Equivalent of functional component)
    Copied CycloPediaClassPage and Instructor and renamed the new ones to have the func keyword in them.
    In index.jsx, made sure to load the CycloPediaFuncPage component.

108.
    Started converting class to functional.
    Removed extends implementation and converted it an arrow function
    Then, existing state is broken down to multiple states.
    So, 3 states now:
        state,
        inputName
        inputFeedback

    Plus, since we need to migrate from setState to useState, for that, we need to SPREAD existing state and then apply update to the state property we're wanting to update
    Also, removed this keyword from entire component.

    Also, with inputName and inputFeedback, set the state binding correctly. For ex:
    Earlier with OnChange, was bound with setState but since we split the state, need to change the method there.
    Compare CycloPediaFuncPage and CycloPediaClass page for more details

109.
    Right now, we do not have instructor details being loaded in functional component.
    For doing that, we need a method like componentDidMount's equivalent.
    So, implementing that now.

    useEffect(() => {
      console.log("This will be called on EVERY Render");
    });

    useEffect(() => {
      console.log("This will be called on Initial/First Render/Mount");
      //ComponentDidMount() equivalent
    }, []);
    
    useEffect(() => {
      console.log("This will be called on whenever value of items specified in array changes");
      //More granular version of ComponentDidUpdate().
      //We can have more than 1 items in array and this didUpdate() equivalent will trigger for each of the state properties specified here
    }, [inputFeedBack, inputName]);

    useEffect(() => {
      console.log("This will be called on Initial/First Render/Mount");
      return() => {
        //ComponentWillUnmount() equivalent
        console.log("This will be called on when component will be UNMOUNTED");
      }
    }, []);

    WE CAN HAVE MULTIPLE useEffect in a single functional component.
    ORDER OF USEEFFECTS MATTER.

    Changing instructorFunc to be functional component to test unMount.

    Still instructor is not loading so, for that adding Random API call in next video.

110.
    Copied random API call.
    Added below implementation.
    useEffect(() => {
      //ComponentDidMount() equivalent
      console.log("This will be called on Initial/First Render/Mount");

      const getUser = async() =>{
        const response = await getRandomUser();
        setState((prevState) => {
            return {
              ...prevState,
                instructor: {
                    name: response.data.first_name + " " + response.data.last_name,
                    email: response.data.email,
                    phone: response.data.phone_number,
                },
            };
        });
      };
      getUser();
    }, []);

    For using async/await with useEffect, need to create a new async function and then call it from the end of the method

111.
    Works fine. Upon toggling the implementation, we do see Instructor - Unmount being printed on the logs

112/113.
    Assignment - Load instructor when show/hide of instructor is clicked.
    For that, we need to modify the useEffect which we wrote to get the Random User.
    Instead of empty array, specified to call the useEffect when [state.hideInstructor] is updated.
    Also, added an if condition inside method to call getUser() only if hideInstructor is true.